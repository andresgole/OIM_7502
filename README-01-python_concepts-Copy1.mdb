{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9383bafa",
   "metadata": {},
   "source": [
    "### Python Programming Concepts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17df7d6e",
   "metadata": {},
   "source": [
    "#### 1. Create a variable to store the value 500 for sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a5f43c2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "500"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales = 500\n",
    "sales"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dc8b9ea",
   "metadata": {},
   "source": [
    "#### 2. Create a variable to store several values:  \n",
    "* sales: 500, 475, 625\n",
    "* integers 1 - 9 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "902fe3bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[500, 475, 625]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales = [500, 475, 625]\n",
    "sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e1d74970-0bbd-44d8-b9e9-d75fd7fb5c35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integers = list(range(1, 10))\n",
    "integers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62e55953",
   "metadata": {},
   "source": [
    "#### 3. Create a variable to store the names and email addresses for a number of customers\n",
    "* John, john@some.com; Ann, ann@some.com"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "03f2b161",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'name': 'John', 'email': 'john@some.com'},\n",
       " {'name': 'Ann', 'email': 'ann@some.com'}]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer_data = [{\"name\":\"John\", 'email': \"john@some.com\"}, {\"name\": \"Ann\",'email': \"ann@some.com\"}]\n",
    "customer_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6b1e8c6",
   "metadata": {},
   "source": [
    "#### 4. Use Python to generate a random value based on each of following:\n",
    "1. between 0 and 1\n",
    "2. the standard normal distribution (rounded to two decimal places)\n",
    "3. a value between 1 and 10\n",
    "4. either H or T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f004d7b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7594357623073816"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import random\n",
    "random_between_0_1 = random.random()\n",
    "random_between_0_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a8efc6fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.21"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "random_SNM = round(np.random.normal(), 2)\n",
    "random_SNM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1a29e601",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import random\n",
    "random_between_1_10 = random.randint(1, 10)\n",
    "random_between_1_10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3a150c3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'H'"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_H_or_T = random.choice(['H', 'T'])\n",
    "random_H_or_T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f80f4b3b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bdb52b86",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "7eddf06a",
   "metadata": {},
   "source": [
    "#### 5. Use Python to determine your current working directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d8f79474",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "current_working_directory = os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc43ec50",
   "metadata": {},
   "source": [
    "#### 6. Use Python to determine how many days until New Year's Day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "13f630fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "current_date = datetime.now()\n",
    "new_year = datetime(current_date.year + 1, 1, 1)\n",
    "days_until_new_year = (new_year - current_date).days"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ba4ea92",
   "metadata": {},
   "source": [
    "#### 7. Write a short program that displays the future value of 1,000 earning 5%  at the end of each year for the next 5 years"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6fef4a8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "principal = 1000\n",
    "rate = 0.05\n",
    "for year in range(1, 6):\n",
    "    future_value = principal * (1 + rate) ** year\n",
    "return future_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "150201c8",
   "metadata": {},
   "source": [
    "#### 8. Write a short program that prompts a user to enter a stock symbol and press enter. Add each symbol entered to a variable. The program should run until the user presses the enter key without entering anything (empty string) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "931a346f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a stock symbol (or press Enter to finish):  AMZ\n",
      "Enter a stock symbol (or press Enter to finish):  SDF\n",
      "Enter a stock symbol (or press Enter to finish):  \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['AMZ', 'SDF']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stock_symbols = []  \n",
    "while True:\n",
    "    symbol = input(\"Enter a stock symbol (or press Enter to finish): \").strip()\n",
    "    if symbol == \"\":  \n",
    "        break\n",
    "    stock_symbols.append(symbol)  \n",
    "stock_symbols"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc2a7592",
   "metadata": {},
   "source": [
    "#### 9. Write the code necessary to calculate the sum of the square differences of a group of values : \n",
    "58, 32, 37, 41, 36, 36, 54, 37, 25, 53\n",
    "##### $\\Sigma $(${x}$ - $\\bar{x}$)$^2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13d9a6c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#I couldn't get this to work"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d6f2e64",
   "metadata": {},
   "source": [
    "#### 10. Opening, reading and writing files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7fa569d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#I couldn't get this to work"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eec548d6",
   "metadata": {},
   "source": [
    "#### 11. Create a function the will simulate rolling two die and return the value of each and and the sum "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bb115cdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "dice_1 = random.randint(1, 6)\n",
    "dice_2 = random.randint(1, 6)\n",
    "Total = dice_1 + dice_2\n",
    "return dice_1, dice_2, total"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21556d7f",
   "metadata": {},
   "source": [
    "#### 12. Write the code needed to evaluate whether a value in a group of values is negative or postive and prints an approriate message, i.e. postive, negative \n",
    "-1.59, 2.36, 1.69, 1.13, -0.91, 1.48, -0.34, 1.31, -0.74, 0.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d6c38ecb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-1.59 is negative.\n",
      "2.36 is positive.\n",
      "1.69 is positive.\n",
      "1.13 is positive.\n",
      "-0.91 is negative.\n",
      "1.48 is positive.\n",
      "-0.34 is negative.\n",
      "1.31 is positive.\n",
      "-0.74 is negative.\n",
      "0.2 is positive.\n",
      "List of negative numbers: [-1.59, -0.91, -0.34, -0.74]\n",
      "List of positive numbers: [2.36, 1.69, 1.13, 1.48, 1.31, 0.2]\n"
     ]
    }
   ],
   "source": [
    "Values = [-1.59, 2.36, 1.69, 1.13, -0.91, 1.48, -0.34, 1.31, -0.74, 0.2]\n",
    "\n",
    "for value in Values:\n",
    "    if value > 0:\n",
    "        print(f\"{value} is positive.\")\n",
    "    elif value < 0:\n",
    "        print(f\"{value} is negative.\")\n",
    "\n",
    "negative_numbers = [value for value in Values if value < 0]\n",
    "positive_numbers = [value for value in Values if value > 0]\n",
    "print(\"List of negative numbers:\", negative_numbers)\n",
    "print(\"List of positive numbers:\", positive_numbers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aaefba17",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8cafe65c",
   "metadata": {},
   "source": [
    "#### 14.  Complete the following:\n",
    "1. Write a program that generates 500 random integers from 1 to n, for example, the first integer will be 1 the second will be 1 or 2, the fifth between 1 and 5, and so on.\n",
    "2. The program should write each integer to a file \n",
    "3. Once all integers are written close the file\n",
    "\n",
    "##### Part 2\n",
    "1. Open and read the file into a list\n",
    "2. Create a line plot of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "60a910bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1,\n",
       " 2,\n",
       " 2,\n",
       " 4,\n",
       " 3,\n",
       " 6,\n",
       " 6,\n",
       " 6,\n",
       " 8,\n",
       " 3,\n",
       " 4,\n",
       " 11,\n",
       " 4,\n",
       " 12,\n",
       " 4,\n",
       " 14,\n",
       " 8,\n",
       " 11,\n",
       " 7,\n",
       " 17,\n",
       " 14,\n",
       " 20,\n",
       " 12,\n",
       " 21,\n",
       " 21,\n",
       " 25,\n",
       " 16,\n",
       " 8,\n",
       " 28,\n",
       " 16,\n",
       " 3,\n",
       " 25,\n",
       " 28,\n",
       " 20,\n",
       " 35,\n",
       " 31,\n",
       " 32,\n",
       " 35,\n",
       " 39,\n",
       " 3,\n",
       " 26,\n",
       " 27,\n",
       " 36,\n",
       " 36,\n",
       " 9,\n",
       " 26,\n",
       " 23,\n",
       " 47,\n",
       " 30,\n",
       " 12,\n",
       " 21,\n",
       " 35,\n",
       " 41,\n",
       " 13,\n",
       " 14,\n",
       " 8,\n",
       " 15,\n",
       " 35,\n",
       " 41,\n",
       " 50,\n",
       " 30,\n",
       " 48,\n",
       " 9,\n",
       " 31,\n",
       " 31,\n",
       " 53,\n",
       " 63,\n",
       " 35,\n",
       " 62,\n",
       " 56,\n",
       " 55,\n",
       " 68,\n",
       " 28,\n",
       " 15,\n",
       " 42,\n",
       " 14,\n",
       " 38,\n",
       " 36,\n",
       " 14,\n",
       " 1,\n",
       " 13,\n",
       " 32,\n",
       " 34,\n",
       " 58,\n",
       " 25,\n",
       " 43,\n",
       " 59,\n",
       " 38,\n",
       " 63,\n",
       " 33,\n",
       " 60,\n",
       " 26,\n",
       " 93,\n",
       " 45,\n",
       " 52,\n",
       " 16,\n",
       " 35,\n",
       " 31,\n",
       " 82,\n",
       " 33,\n",
       " 15,\n",
       " 58,\n",
       " 32,\n",
       " 103,\n",
       " 47,\n",
       " 26,\n",
       " 17,\n",
       " 57,\n",
       " 57,\n",
       " 56,\n",
       " 41,\n",
       " 38,\n",
       " 26,\n",
       " 65,\n",
       " 63,\n",
       " 22,\n",
       " 48,\n",
       " 66,\n",
       " 39,\n",
       " 83,\n",
       " 44,\n",
       " 55,\n",
       " 17,\n",
       " 18,\n",
       " 33,\n",
       " 81,\n",
       " 125,\n",
       " 25,\n",
       " 5,\n",
       " 63,\n",
       " 124,\n",
       " 130,\n",
       " 13,\n",
       " 64,\n",
       " 50,\n",
       " 52,\n",
       " 9,\n",
       " 54,\n",
       " 32,\n",
       " 30,\n",
       " 126,\n",
       " 51,\n",
       " 1,\n",
       " 61,\n",
       " 57,\n",
       " 30,\n",
       " 99,\n",
       " 127,\n",
       " 43,\n",
       " 15,\n",
       " 92,\n",
       " 56,\n",
       " 100,\n",
       " 43,\n",
       " 108,\n",
       " 61,\n",
       " 33,\n",
       " 76,\n",
       " 6,\n",
       " 36,\n",
       " 46,\n",
       " 156,\n",
       " 15,\n",
       " 83,\n",
       " 154,\n",
       " 28,\n",
       " 134,\n",
       " 40,\n",
       " 36,\n",
       " 74,\n",
       " 67,\n",
       " 164,\n",
       " 66,\n",
       " 110,\n",
       " 54,\n",
       " 88,\n",
       " 161,\n",
       " 148,\n",
       " 119,\n",
       " 4,\n",
       " 49,\n",
       " 125,\n",
       " 64,\n",
       " 154,\n",
       " 119,\n",
       " 134,\n",
       " 107,\n",
       " 186,\n",
       " 169,\n",
       " 23,\n",
       " 2,\n",
       " 42,\n",
       " 56,\n",
       " 108,\n",
       " 73,\n",
       " 164,\n",
       " 127,\n",
       " 63,\n",
       " 199,\n",
       " 59,\n",
       " 125,\n",
       " 71,\n",
       " 12,\n",
       " 94,\n",
       " 167,\n",
       " 129,\n",
       " 116,\n",
       " 82,\n",
       " 140,\n",
       " 6,\n",
       " 130,\n",
       " 176,\n",
       " 51,\n",
       " 79,\n",
       " 55,\n",
       " 126,\n",
       " 117,\n",
       " 86,\n",
       " 34,\n",
       " 16,\n",
       " 75,\n",
       " 176,\n",
       " 57,\n",
       " 117,\n",
       " 167,\n",
       " 161,\n",
       " 10,\n",
       " 141,\n",
       " 13,\n",
       " 52,\n",
       " 208,\n",
       " 165,\n",
       " 183,\n",
       " 142,\n",
       " 34,\n",
       " 7,\n",
       " 155,\n",
       " 68,\n",
       " 228,\n",
       " 227,\n",
       " 29,\n",
       " 52,\n",
       " 74,\n",
       " 58,\n",
       " 43,\n",
       " 196,\n",
       " 135,\n",
       " 56,\n",
       " 105,\n",
       " 26,\n",
       " 79,\n",
       " 39,\n",
       " 133,\n",
       " 81,\n",
       " 86,\n",
       " 22,\n",
       " 154,\n",
       " 187,\n",
       " 182,\n",
       " 138,\n",
       " 40,\n",
       " 77,\n",
       " 164,\n",
       " 232,\n",
       " 183,\n",
       " 47,\n",
       " 162,\n",
       " 266,\n",
       " 41,\n",
       " 32,\n",
       " 134,\n",
       " 8,\n",
       " 201,\n",
       " 210,\n",
       " 40,\n",
       " 55,\n",
       " 41,\n",
       " 97,\n",
       " 123,\n",
       " 260,\n",
       " 205,\n",
       " 233,\n",
       " 24,\n",
       " 263,\n",
       " 190,\n",
       " 153,\n",
       " 107,\n",
       " 51,\n",
       " 47,\n",
       " 67,\n",
       " 7,\n",
       " 96,\n",
       " 268,\n",
       " 242,\n",
       " 277,\n",
       " 228,\n",
       " 241,\n",
       " 239,\n",
       " 85,\n",
       " 7,\n",
       " 122,\n",
       " 136,\n",
       " 21,\n",
       " 146,\n",
       " 100,\n",
       " 197,\n",
       " 287,\n",
       " 179,\n",
       " 87,\n",
       " 179,\n",
       " 175,\n",
       " 289,\n",
       " 21,\n",
       " 102,\n",
       " 248,\n",
       " 50,\n",
       " 169,\n",
       " 271,\n",
       " 181,\n",
       " 136,\n",
       " 302,\n",
       " 101,\n",
       " 137,\n",
       " 10,\n",
       " 213,\n",
       " 218,\n",
       " 45,\n",
       " 55,\n",
       " 124,\n",
       " 69,\n",
       " 81,\n",
       " 134,\n",
       " 139,\n",
       " 136,\n",
       " 30,\n",
       " 302,\n",
       " 16,\n",
       " 53,\n",
       " 35,\n",
       " 334,\n",
       " 338,\n",
       " 77,\n",
       " 174,\n",
       " 165,\n",
       " 215,\n",
       " 221,\n",
       " 256,\n",
       " 89,\n",
       " 168,\n",
       " 108,\n",
       " 56,\n",
       " 101,\n",
       " 344,\n",
       " 245,\n",
       " 262,\n",
       " 4,\n",
       " 4,\n",
       " 333,\n",
       " 149,\n",
       " 274,\n",
       " 49,\n",
       " 323,\n",
       " 267,\n",
       " 145,\n",
       " 14,\n",
       " 126,\n",
       " 81,\n",
       " 149,\n",
       " 334,\n",
       " 171,\n",
       " 216,\n",
       " 132,\n",
       " 190,\n",
       " 113,\n",
       " 289,\n",
       " 256,\n",
       " 286,\n",
       " 336,\n",
       " 148,\n",
       " 271,\n",
       " 224,\n",
       " 343,\n",
       " 16,\n",
       " 369,\n",
       " 239,\n",
       " 349,\n",
       " 265,\n",
       " 356,\n",
       " 351,\n",
       " 298,\n",
       " 54,\n",
       " 290,\n",
       " 21,\n",
       " 321,\n",
       " 122,\n",
       " 28,\n",
       " 6,\n",
       " 358,\n",
       " 44,\n",
       " 18,\n",
       " 363,\n",
       " 114,\n",
       " 51,\n",
       " 68,\n",
       " 270,\n",
       " 179,\n",
       " 299,\n",
       " 109,\n",
       " 260,\n",
       " 388,\n",
       " 267,\n",
       " 370,\n",
       " 52,\n",
       " 321,\n",
       " 264,\n",
       " 340,\n",
       " 182,\n",
       " 88,\n",
       " 333,\n",
       " 302,\n",
       " 367,\n",
       " 173,\n",
       " 17,\n",
       " 111,\n",
       " 387,\n",
       " 424,\n",
       " 307,\n",
       " 36,\n",
       " 242,\n",
       " 409,\n",
       " 326,\n",
       " 375,\n",
       " 234,\n",
       " 19,\n",
       " 222,\n",
       " 25,\n",
       " 140,\n",
       " 138,\n",
       " 338,\n",
       " 196,\n",
       " 402,\n",
       " 60,\n",
       " 367,\n",
       " 177,\n",
       " 243,\n",
       " 348,\n",
       " 31,\n",
       " 336,\n",
       " 149,\n",
       " 280,\n",
       " 369,\n",
       " 202,\n",
       " 152,\n",
       " 386,\n",
       " 288,\n",
       " 103,\n",
       " 289,\n",
       " 335,\n",
       " 398,\n",
       " 26,\n",
       " 158,\n",
       " 234,\n",
       " 381,\n",
       " 99,\n",
       " 222,\n",
       " 325,\n",
       " 268,\n",
       " 344,\n",
       " 384,\n",
       " 391,\n",
       " 67,\n",
       " 307,\n",
       " 76,\n",
       " 437,\n",
       " 25,\n",
       " 221,\n",
       " 139,\n",
       " 381,\n",
       " 291,\n",
       " 153,\n",
       " 338,\n",
       " 216,\n",
       " 59,\n",
       " 53,\n",
       " 218,\n",
       " 425,\n",
       " 415,\n",
       " 338,\n",
       " 224,\n",
       " 297,\n",
       " 129,\n",
       " 154,\n",
       " 143,\n",
       " 91,\n",
       " 168,\n",
       " 161,\n",
       " 277,\n",
       " 267,\n",
       " 34,\n",
       " 62]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "random_integers = []\n",
    "for i in range(1, 501):  \n",
    "    random_integers.append(random.randint(1, i))  # Generate a random integer from 1 to i\n",
    "random_integers\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d6b4180c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#I couldn't opened and closed files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adb6aa11",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6745da79",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21140445",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d546600",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
